import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
from sklearn.metrics import roc_curve, roc_auc_score, classification_report
from sklearn.linear_model import LogisticRegression
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split, GridSearchCV

# Load the dataset
file = open(r"C:/Users/prata/OneDrive/Documents/error decoded/newtry/ClaMP_Integrated-5184.csv")
df = pd.read_csv(file, skip_blank_lines=True, na_filter=False, encoding='utf-8')

# Map packer types to numerical values
pt = df['packer_type'].unique()
p_types = {pt[i]: i for i in range(len(pt))}
temp = []
for t in df['packer_type']:
    temp.append(p_types[t])
df['pt_num'] = temp
excluded_features = [f'FH_char{i}' for i in range(8, 15)]
df_selected = df.drop(excluded_features, axis=1)

# Extract 'class' column
cl = df_selected.pop('class')

# Exclude 'packer_type' column
df_selected.pop('packer_type')

# Split the dataset
x_train, x_test, y_train, y_test = train_test_split(df_selected, cl, random_state=0)

# Create pipeline with StandardScaler and Logistic Regression
pipeStd = Pipeline([('scaler', StandardScaler()), ('logreg', LogisticRegression(random_state=0))])

# Define the parameter grid for GridSearchCV
param_grid = {
    'logreg__C': [0.1, 1, 10, 100, 200, 300],
}

# Create GridSearchCV object
grid = GridSearchCV(pipeStd, param_grid, cv=5, n_jobs=-1)

# Train the model
grid.fit(x_train.to_numpy(), y_train)

# Evaluate the model
print('Logistic Regression score after StdScaler: {:.3f}'.format(grid.score(x_test.to_numpy(), y_test)))
print("Logistic Regression's best score on cross-validation: {:.3f}".format(grid.best_score_))
print("Classifier's best parameters: {}".format(grid.best_params_))

# Make predictions and print classification report
pred_val = grid.predict(x_test.to_numpy())
print(classification_report(y_test, pred_val, target_names=['benign', 'malicious'], digits=3))

####

import joblib

# Save the trained model to a file
model_filename = 'logreg_model.joblib'
joblib.dump(grid.best_estimator_, model_filename)

print(f"Model saved to {model_filename}")